# import UserOrderByInput,PostOrderByInput, CommentOrderByInput from './generated/database.graphql'

type Subscription {
  comment(postId:ID!): CommentSubscriptionPayload!
  post:PostSubscriptionPayload!
  myPost: PostSubscriptionPayload!
}

enum mutationType {
  CREATED
  DELETED
  UPDATED
}
 type PostSubscriptionPayload{
   mutation:mutationType!
   node:Post
 }

 type CommentSubscriptionPayload{
   mutation:mutationType!
   node:Comment
 }

  type User {
    id: ID!
    email: String
    password: String!
    firstName: String!
    lastName: String
    age: Int
    posts: [Post!]!
    comments: [Comment!]!
    updatedAt: String!
    createdAt: String!
  } 

  type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
    updatedAt: String!
    createdAt: String!
  }

  type Post {
    id: ID!
    body: String!
    Published: Boolean!
    title: String!
    author: User!
    readTime: String!
    comments:[Comment!]!
    updatedAt: String!
    createdAt: String!
  }
  type Query {
    me: User!
    post(id:ID!): Post!
    users(query: String,limit: Int,skip: Int,after:String,orderBy:UserOrderByInput):[User!]!
    posts(query:String,limit: Int,skip: Int,after: String,orderBy:PostOrderByInput):[Post!]!
    comments(limit: Int,skip: Int,after: String,orderBy:CommentOrderByInput):[Comment!]!
    myPost(query:String,limit: Int,skip: Int,after: String,orderBy:PostOrderByInput):[Post!]!
  }

  input CreateUserInput {
    email:String!,
    age:Int,
    firstName:String!,
    lastName:String,
    password:String!
  }

  input CreatePostInput {
    body:String!,
    title:String!,
    Published:Boolean!,
  }

  input CreateCommentInput {
    text:String!,
    post:ID!
  }

  input editUserInput{
    email:String,
    age:Int,
    firstName:String,
    lastName:String,
    password:String
  }
  input editCommentInput{
      text:String,
  }
  input editPostInput{
    body:String,
    title:String,
    Published:Boolean,
  }
  type authPayload {
    token: String!
    user: User!
  }

  input LoginUserInput{
    email: String!
    password: String!
  }
  type Mutation {
    createUser(data:CreateUserInput):authPayload!
    loginUser(data:LoginUserInput):authPayload!
    editUser(data:editUserInput):User!
    deleteUser:User!
    createPost(data:CreatePostInput):Post!
    editPost(id:ID!,data:editPostInput):Post!
    deletePost(id:ID!): Post!
    createComment(data:CreateCommentInput):Comment!
    editComment(id:ID!,data:editCommentInput):Comment!
    deleteComment(id:ID!): Boolean!
  }

